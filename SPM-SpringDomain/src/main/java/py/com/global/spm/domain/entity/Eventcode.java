package py.com.global.spm.domain.entity;

// Generated 15/07/2013 09:59:46 AM by Hibernate Tools 3.4.0.CR1

import org.hibernate.validator.constraints.Length;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;


/**
 * Eventcode generated by hbm2java
 */
@Entity
@Table(name = "EVENTCODE" )
public class Eventcode implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private EventcodeId id;
	private Process process;
	private String descriptionChr;
	private Set<Logdraftop> logdraftops = new HashSet<Logdraftop>(0);
	private Set<Logpayment> logpayments = new HashSet<Logpayment>(0);
	private Set<Logmtsrev> logmtsrevs = new HashSet<Logmtsrev>(0);
	private Set<Logmts> logmtses = new HashSet<Logmts>(0);
	private Set<Logmessage> logmessages = new HashSet<Logmessage>(0);

	public Eventcode() {
	}

	public Eventcode(EventcodeId id) {
		this.id = id;
	}

	public Eventcode(EventcodeId id, Process process, String descriptionChr,
                     Set<Logdraftop> logdraftops, Set<Logpayment> logpayments,
                     Set<Logmtsrev> logmtsrevs, Set<Logmts> logmtses,
                     Set<Logmessage> logmessages) {
		this.id = id;
		this.process = process;
		this.descriptionChr = descriptionChr;
		this.logdraftops = logdraftops;
		this.logpayments = logpayments;
		this.logmtsrevs = logmtsrevs;
		this.logmtses = logmtses;
		this.logmessages = logmessages;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "idprocessPk", column = @Column(name = "IDPROCESS_PK", nullable = false, precision = 4, scale = 0)),
			@AttributeOverride(name = "ideventcodeNum", column = @Column(name = "IDEVENTCODE_NUM", nullable = false, precision = 5, scale = 0)) })
	@NotNull
	public EventcodeId getId() {
		return this.id;
	}

	public void setId(EventcodeId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDPROCESS_PK", nullable = false, insertable = false, updatable = false)
	@NotNull
	public Process getProcess() {
		return this.process;
	}

	public void setProcess(Process process) {
		this.process = process;
	}

	@Column(name = "DESCRIPTION_CHR", length = 100)
	@Length(max = 100)
	public String getDescriptionChr() {
		return this.descriptionChr;
	}

	public void setDescriptionChr(String descriptionChr) {
		this.descriptionChr = descriptionChr;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eventcode")
	public Set<Logdraftop> getLogdraftops() {
		return this.logdraftops;
	}

	public void setLogdraftops(Set<Logdraftop> logdraftops) {
		this.logdraftops = logdraftops;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eventcode")
	public Set<Logpayment> getLogpayments() {
		return this.logpayments;
	}

	public void setLogpayments(Set<Logpayment> logpayments) {
		this.logpayments = logpayments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eventcode")
	public Set<Logmtsrev> getLogmtsrevs() {
		return this.logmtsrevs;
	}

	public void setLogmtsrevs(Set<Logmtsrev> logmtsrevs) {
		this.logmtsrevs = logmtsrevs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eventcode")
	public Set<Logmts> getLogmtses() {
		return this.logmtses;
	}

	public void setLogmtses(Set<Logmts> logmtses) {
		this.logmtses = logmtses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "eventcode")
	public Set<Logmessage> getLogmessages() {
		return this.logmessages;
	}

	public void setLogmessages(Set<Logmessage> logmessages) {
		this.logmessages = logmessages;
	}

}
