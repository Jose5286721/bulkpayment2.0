package py.com.global.spm.domain.entity;

// Generated 15/07/2013 09:59:46 AM by Hibernate Tools 3.4.0.CR1

import py.com.global.spm.domain.utils.CryptoUtils;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.math.BigDecimal;


/**
 * Draftdetail generated by hbm2java
 */
@Entity
@Table(name = "DRAFTDETAIL")
public class Draftdetail implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private DraftdetailId id;
	private Beneficiary beneficiary;
	private Draft draft;
	private BigDecimal amountNum;
	private String amountChr;

	public Draftdetail() {
	}

	public Draftdetail(DraftdetailId id, Beneficiary beneficiary, Draft draft,
			BigDecimal amountNum) {
		this.id = id;
		this.beneficiary = beneficiary;
		this.draft = draft;
		setAmountNum(amountNum);
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "iddraftPk", column = @Column(name = "IDDRAFT_PK", nullable = false, precision = 22, scale = 0)),
			@AttributeOverride(name = "idbeneficiaryPk", column = @Column(name = "IDBENEFICIARY_PK", nullable = false, precision = 22, scale = 0)) })
	@NotNull
	public DraftdetailId getId() {
		return this.id;
	}

	public void setId(DraftdetailId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDBENEFICIARY_PK", nullable = false, insertable = false, updatable = false)
	@NotNull
	public Beneficiary getBeneficiary() {
		return this.beneficiary;
	}

	public void setBeneficiary(Beneficiary beneficiary) {
		this.beneficiary = beneficiary;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDDRAFT_PK", nullable = false, insertable = false, updatable = false)
	@NotNull
	public Draft getDraft() {
		return this.draft;
	}

	public void setDraft(Draft draft) {
		this.draft = draft;
	}

	@Column(name = "AMOUNT_CHR", nullable = false, length = 48)
	@NotNull
	public String getAmountChr() {
		return this.amountChr;
	}

	public void setAmountChr(String amountChr) {
		this.amountChr = amountChr;
	}

	@Transient
	public BigDecimal getAmountNum() {
		if(!CryptoUtils.enabled){
			return new BigDecimal(this.getAmountChr());
		}
		return CryptoUtils.decryptAmount(this.getAmountChr());
	}

	public void setAmountNum(BigDecimal amountNum) {
		if (CryptoUtils.enabled) {
			this.amountChr = CryptoUtils.encryptAmount(amountNum);
		}else {
			this.amountChr = amountNum.toPlainString();
		}
	}

	@Override
	public String toString() {
		return "Draftdetail{" +
				"idBeneficiary=" + beneficiary.getIdbeneficiaryPk() +
				", idDraft=" + draft.getIddraftPk() +
				", amountNum=" + amountNum +
				", amountChr='" + amountChr + '\'' +
				'}';
	}
}
