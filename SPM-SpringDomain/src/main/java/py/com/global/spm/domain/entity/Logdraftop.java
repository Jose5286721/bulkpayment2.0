package py.com.global.spm.domain.entity;

// Generated 15/07/2013 09:59:46 AM by Hibernate Tools 3.4.0.CR1

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.util.Date;

/**
 * Logdraftop generated by hbm2java
 */
@Entity
@Table(name = "LOGDRAFTOP" )
public class Logdraftop implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long iddrafopPk;
	private Eventcode eventcode;
	private Draft draft;
	private Company company;
	private Paymentorder paymentorder;
	private Date creationdateTim;

	public Logdraftop() {
	}

	public Logdraftop(Long iddrafopPk, Eventcode eventcode, Draft draft,
			Company company, Date creationdateTim) {
		this.iddrafopPk = iddrafopPk;
		this.eventcode = eventcode;
		this.draft = draft;
		this.company = company;
		this.creationdateTim = creationdateTim;
	}

	public Logdraftop(Long iddrafopPk, Eventcode eventcode, Draft draft,
			Company company, Paymentorder paymentorder,
			Date creationdateTim) {
		this.iddrafopPk = iddrafopPk;
		this.eventcode = eventcode;
		this.draft = draft;
		this.company = company;
		this.paymentorder = paymentorder;
		this.creationdateTim = creationdateTim;
	}

	@Id
	@SequenceGenerator(name = "LOGDRAFTOP_IDDRAFTOPPK_GENERATOR", sequenceName = "LOGDRAFTOP_SEQ", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "LOGDRAFTOP_IDDRAFTOPPK_GENERATOR")
	@Column(name = "IDDRAFTOP_PK", unique = true, nullable = false, precision = 22, scale = 0)
	@NotNull
	public Long getIddrafopPk() {
		return this.iddrafopPk;
	}

	public void setIddrafopPk(Long iddrafopPk) {
		this.iddrafopPk = iddrafopPk;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "IDPROCESS_PK", referencedColumnName = "IDPROCESS_PK", nullable = false),
			@JoinColumn(name = "IDEVENTCODE_NUM", referencedColumnName = "IDEVENTCODE_NUM", nullable = false) })
	@NotNull
	public Eventcode getEventcode() {
		return this.eventcode;
	}

	public void setEventcode(Eventcode eventcode) {
		this.eventcode = eventcode;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDDRAFT_PK", nullable = false)
	@NotNull
	public Draft getDraft() {
		return this.draft;
	}

	public void setDraft(Draft draft) {
		this.draft = draft;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDCOMPANY_PK", nullable = false)
	@NotNull
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IDPAYMENTORDER_PK")
	public Paymentorder getPaymentorder() {
		return this.paymentorder;
	}

	public void setPaymentorder(Paymentorder paymentorder) {
		this.paymentorder = paymentorder;
	}

	@Column(name = "CREATIONDATE_TIM", nullable = false)
	@NotNull
	public Date getCreationdateTim() {
		return this.creationdateTim;
	}

	public void setCreationdateTim(Date creationdateTim) {
		this.creationdateTim = creationdateTim;
	}


	@Override
	public String toString() {
		final StringBuffer sb = new StringBuffer("Logdraftop{");
		if(iddrafopPk!=null) sb.append("iddrafopPk=").append(iddrafopPk);
		if(eventcode!=null) sb.append(", idEventcode=").append(eventcode.getId());
		if(draft!=null) sb.append(", idDraft=").append(draft.getIddraftPk());
		if(company!=null) sb.append(", idCompany=").append(company.getIdcompanyPk());
		if(paymentorder!=null) sb.append(", idPaymentorder=").append(paymentorder.getIdpaymentorderPk());
		if(creationdateTim!=null) sb.append(", creationdateTim=").append(creationdateTim);
		sb.append('}');
		return sb.toString();
	}
}
