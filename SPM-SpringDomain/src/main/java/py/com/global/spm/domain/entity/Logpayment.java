package py.com.global.spm.domain.entity;

// Generated 15/07/2013 09:59:46 AM by Hibernate Tools 3.4.0.CR1

import py.com.global.spm.domain.utils.EnumAppHelper;
import py.com.global.spm.domain.utils.CryptoUtils;

import javax.persistence.*;


import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;


/**
 * Logpayment generated by hbm2java
 */
@Entity
@Table(name = "LOGPAYMENT")
public class Logpayment implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private Long idpaymentNum;
    private Paymentorderdetail paymentorderdetail;
    private Eventcode eventcode;
    private Company company;
    private BigDecimal amountNum;
    private String amountChr;
    private Date creationdateTim;
    private String stateChr;
    private String amountpaidChr;
    private Set<Logmtsrev> logmtsrevs = new HashSet<Logmtsrev>(0);
    private Set<Logmts> logmtses = new HashSet<Logmts>(0);


    private Timestamp updatedateTim;
    private String subscriberDocNumChr;
    private String phonenumberChr;

    private Long idprocessPk;
    private Long ideventcodeNum;
    private Integer retry;

    public Logpayment() {
    }

    public Logpayment(Long idpaymentNum, Paymentorderdetail paymentorderdetail,
                      Eventcode eventcode, Company company, BigDecimal amountNum,
                      Date creationdateTim, String stateChr) {
        this.idpaymentNum = idpaymentNum;
        this.paymentorderdetail = paymentorderdetail;
        this.eventcode = eventcode;
        this.company = company;
        this.amountNum = amountNum;
        this.creationdateTim = creationdateTim;
        this.stateChr = stateChr;
    }

    public Logpayment(Long idpaymentNum, Paymentorderdetail paymentorderdetail, Eventcode eventcode,
                      Company company, BigDecimal amountNum, String amountChr, Date creationdateTim,
                      String stateChr, String amountpaidChr,
                      Timestamp updatedateTim, String subscriberDocNumChr, String phonenumberChr) {
        this.idpaymentNum = idpaymentNum;
        this.paymentorderdetail = paymentorderdetail;
        this.eventcode = eventcode;
        this.company = company;
        this.amountNum = amountNum;
        this.amountChr = amountChr;
        this.creationdateTim = creationdateTim;
        this.stateChr = stateChr;
        this.amountpaidChr = amountpaidChr;
        this.updatedateTim = updatedateTim;
        this.subscriberDocNumChr = subscriberDocNumChr;
        this.phonenumberChr = phonenumberChr;
    }

    @Id
    @SequenceGenerator(name = "LOGPAYMENT_IDPAYMENTNUM_GENERATOR", sequenceName = "LOGPAYMENT_SEQ", allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "LOGPAYMENT_IDPAYMENTNUM_GENERATOR")
    @Column(name = "IDPAYMENT_NUM", unique = true, nullable = false, precision = 22, scale = 0)
    @NotNull
    public Long getIdpaymentNum() {
        return this.idpaymentNum;
    }

    public void setIdpaymentNum(Long idpaymentNum) {
        this.idpaymentNum = idpaymentNum;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns({
            @JoinColumn(name = "IDPAYMENTORDER_PK", referencedColumnName = "IDPAYMENTORDER_PK", nullable = false),
            @JoinColumn(name = "IDBENEFICIARY_PK", referencedColumnName = "IDBENEFICIARY_PK", nullable = false)})
    @NotNull
    public Paymentorderdetail getPaymentorderdetail() {
        return this.paymentorderdetail;
    }

    public void setPaymentorderdetail(Paymentorderdetail paymentorderdetail) {
        this.paymentorderdetail = paymentorderdetail;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumns({
            @JoinColumn(name = "IDPROCESS_PK", referencedColumnName = "IDPROCESS_PK", nullable = false),
            @JoinColumn(name = "IDEVENTCODE_NUM", referencedColumnName = "IDEVENTCODE_NUM", nullable = false)})
    @NotNull
    public Eventcode getEventcode() {
        return this.eventcode;
    }

    public void setEventcode(Eventcode eventcode) {
        this.eventcode = eventcode;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "IDCOMPANY_PK", nullable = false)
    @NotNull
    public Company getCompany() {
        return this.company;
    }

    public void setCompany(Company company) {
        this.company = company;
    }

    @Column(name = "AMOUNT_CHR", nullable = false, length = 48)
    @NotNull
    public String getAmountChr() {
        return this.amountChr;
    }

    public void setAmountChr(String amountChr) {
        this.amountChr = amountChr;
    }

    @Transient
    public BigDecimal getAmountNum() {
        return new BigDecimal(this.amountChr);
    }

    public void setAmountNum(BigDecimal amountNum) {
        this.amountChr = amountNum.toPlainString();
    }

    @Column(name = "AMOUNTPAID_CHR", nullable = false, length = 48)
    @NotNull
    public String getAmountpaidChr() {
        return this.amountpaidChr;
    }

    public void setAmountpaidChr(String amountpaidChr) {
        this.amountpaidChr = amountpaidChr;
    }

    @Transient
    public BigDecimal getAmountpaidNum() {
        if(!CryptoUtils.enabled){
            return new BigDecimal(this.getAmountpaidChr());
        }
        return CryptoUtils.decryptAmount(this.getAmountpaidChr());
    }

    public void setAmountpaidNum(BigDecimal amountpaidNum) {
        if (CryptoUtils.enabled) {
            this.amountpaidChr = CryptoUtils.encryptAmount(amountpaidNum);
        }else {
            this.amountpaidChr = amountpaidNum.toPlainString();
        }
    }

    @Column(name = "CREATIONDATE_TIM", nullable = false)
    @NotNull
    public Date getCreationdateTim() {
        return this.creationdateTim;
    }

    public void setCreationdateTim(Date creationdateTim) {
        this.creationdateTim = creationdateTim;
    }

    @Column(name = "STATE_CHR", nullable = false, length = 2)
    public String getStateChr() {
        return this.stateChr;
    }

    public void setStateChr(String stateChr) {
        this.stateChr = stateChr;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "logpayment")
    public Set<Logmtsrev> getLogmtsrevs() {
        return this.logmtsrevs;
    }

    public void setLogmtsrevs(Set<Logmtsrev> logmtsrevs) {
        this.logmtsrevs = logmtsrevs;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "logpayment")
    public Set<Logmts> getLogmtses() {
        return this.logmtses;
    }

    public void setLogmtses(Set<Logmts> logmtses) {
        this.logmtses = logmtses;
    }

    @Column(name = "UPDATEDATE_TIM", nullable = false)
    public Timestamp getUpdatedateTim() {
        return updatedateTim;
    }

    public void setUpdatedateTim(Timestamp updatedateTim) {
        this.updatedateTim = updatedateTim;
    }

    @Column(name = "SUBSCRIBERDOCNUM_CHR", length = 20)
    public String getSubscriberDocNumChr() {
        return subscriberDocNumChr;
    }

    public void setSubscriberDocNumChr(String subscriberDocNumChr) {
        this.subscriberDocNumChr = subscriberDocNumChr;
    }


    @Column(name = "PHONENUMBER_CHR", nullable = false, precision = 22)
    public String getPhonenumberChr() {
        return phonenumberChr;
    }

    public void setPhonenumberChr(String phonenumberChr) {
        this.phonenumberChr = phonenumberChr;
    }


    @Transient
    public String getStateDescripcion() {
        return EnumAppHelper.valueOfEnum("EstadosPayment", "getCodigo0",
                getStateChr().toString());
    }

    @Column(name = "IDPROCESS_PK", insertable = false, updatable = false)
    public Long getIdprocessPk() {
        return idprocessPk;
    }

    public void setIdprocessPk(Long idprocessPk) {
        this.idprocessPk = idprocessPk;
    }

    @Column(name = "IDEVENTCODE_NUM", insertable = false, updatable = false)
    public Long getIdeventcodeNum() {
        return ideventcodeNum;
    }

    public void setIdeventcodeNum(Long ideventcodeNum) {
        this.ideventcodeNum = ideventcodeNum;
    }

    @Column(name = "RETRY")
    public Integer getRetry() {
        return retry;
    }

    public void setRetry(Integer retry) {
        this.retry = retry;
    }

    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer("Logpayment{");
        sb.append("idpaymentNum=").append(idpaymentNum);
        sb.append(", idPaymentorderdetail=").append(paymentorderdetail.getId());
        sb.append(", idEventcode=").append(eventcode.getId());
        sb.append(", idCompany=").append(company.getIdcompanyPk());
        sb.append(", amountNum=").append(amountNum);
        sb.append(", amountChr='").append(amountChr).append('\'');
        sb.append(", creationdateTim=").append(creationdateTim);
        sb.append(", stateChr=").append(stateChr);
        sb.append(", amountpaidChr='").append(amountpaidChr).append('\'');
        sb.append(", updatedateTim=").append(updatedateTim);
        sb.append(", subscriberDocNumChr='").append(subscriberDocNumChr).append('\'');
        sb.append(", phonenumberChr='").append(phonenumberChr).append('\'');
        sb.append('}');
        return sb.toString();
    }
}
